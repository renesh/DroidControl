/*******************************************************************************


 *******************************************************************************/
#include <PololuMaestro.h>
#include <SoftwareSerial.h>



//Setup RC Channels
int pin1 = x;  // This is input for RC (channel 3) - Utility Arm
int pin2 = x;  // This is input for RC (channel 5) - Rotary Sound Select
int pin3 = x;  // This in input for RC (channel 6) - Rotary Tool Select
int pin4 = x;  // This in input for RC (channel 7) - Dome Doors, Arms, Periscope
int pin5 = x;  // This in input for RC (channel 8) - Saw, IA, Booster
int pin6 = x;  // This in input for RC (channel 10) -  Sound Play

//Setup default RC signal durations
int duration1 = 1500; // Duration of the pulse from the RC
int duration2 = 1500; // Duration of the pulse from the RC
int duration3 = 1500; // Duration of the pulse from the RC
int duration4 = 1500; // Duration of the pulse from the RC
int duration5 = 1500; // Duration of the pulse from the RC
int duration6 = 1500; // Duration of the pulse from the RC

float time;

// Not sure if this is needed.

int chn3 = -10;
int chn5 = -10;
int chn6 = -10;
int chn7 = -10;
int chn8 = -10;
int chn10 = -10;

//Scripts
int S0 = 0; //Activiate utility arm
int S1 = 1; //Deactiviate utility arm
int S2 = 2; //
int S3 = 3; //
int S4 = 4; // 
int S5 = 5; // 
int S6 = 10; // 
int S7 = 10; //
int S8 = 10; //
int S9 = 10; //


//Setup Serial connection to Maestro

SoftwareSerial maestroSerial(7, 8); //Pin 7 RX, Pin 8 TX
MiniMaestro maestroHead(maestroSerial);


// The setup routine runs once when you press reset.
void setup() {

  //Serial.begin(9600); // ** uncomment to allow debugging**
  
  maestroSerial.begin(9600);
  
  time = millis(); ///////////////STARTS COUNTING TIME IN MILLISECONDS/////////////
}


// The loop routine runs over and over again forever.
void loop() {

duration1 = pulseIn(pin1, HIGH); //Measures the input from rc channel 3
duration2 = pulseIn(pin2, HIGH); //Measures the input from rc channel 5
duration3 = pulseIn(pin3, HIGH); //Measures the input from rc channel 6
duration4 = pulseIn(pin4, HIGH); //Measures the input from rc channel 7
duration5 = pulseIn(pin5, HIGH); //Measures the input from rc channel 8
duration6 = pulseIn(pin6, HIGH); //Measures the input from rc channel 10

chn3 = map (duration1,1000,2000,-255,255);
chn5 = map (duration2,1000,2000,-255,255);
chn6 = map (duration3,1000,2000,-255,255);
chn7 = map (duration4,1000,2000,-255,255);
chn8 = map (duration5,1000,2000,-255,255);
chn10 = map (duration6,1000,2000,-255,255);

// ** Trigger Animations
// Add BEGIN and QUIT to POLOLU CONTROL AFTER SEQUENCE/SCRIPT IS GENERATED

//Switch 3 - Utility Arm - 
  if (chn3 > 0) {
   maestroHead.restartScript(S0); //Activate Utility arm
      {
  if (chn3 < 0) {
   maestroHead.restartScript(S1); //Deactivate Utility arm
      }


// Sets functions of rotary switch 5
// Animation Controls


if (chn5 < 0) {
   //Do Nothing
  }

if ((chn5 > 0) && (chn5 < 60)){
   //Set 1 of functions
   if (chn7 > 0) {
   maestroHead.restartScript(S1); //Activate Dome Doors and Arms
      {
  if (chn7 < 0) {
   maestroHead.restartScript(S2); //Deactivate Dome Doors and Arm
      }
  }

if ((chn5 > 70) && (chn5 < 130)){
   //Set 2 of functions

  }

if ((chn5 > 140) && (chn5 < 200)){
   //Set 3 of functions

  }

if ((chn5 > 210) && (chn5 < 255)){
   //Set 4 of functions

  }

  // Sets functions of rotary switch 6
  // Audio Select


if (chn6 < 0) {
   //Do Nothing
  }

if ((chn6 > 0) && (chn6 < 60)){
   //Set 1 of functions

  }

if ((chn6 > 70) && (chn6 < 130)){
   //Set 2 of functions

  }

if ((chn6 > 140) && (chn6 < 200)){
   //Set 3 of functions

  }

if ((chn6 > 210) && (chn6 < 255)){
   //Set 4 of functions

  }


}
