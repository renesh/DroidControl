#include <Servo.h>  // Include Servo library

// Pin definitions for motor control

const int dirLeftMotor = 8;   // Direction control for left motor
const int pwmLeftMotor = 9;   // PWM signal to Cytron MDD10A for left motor
const int dirRightMotor = 10;  // Direction control for right motor
const int pwmRightMotor = 11;  // PWM signal to Cytron MDD10A for right motor

// Pin definitions for receiver channels (PWM inputs)
const int channel1Pin = 2;  // Channel 1 (left-right control, steering)
const int channel2Pin = 3;  // Channel 2 (forward-reverse control)
const int channel3Pin = 4; // Channel 3 (servo control based on Channel 5)
const int channel4Pin = 5;  // Channel 4 (servo control based on Channel 5)
const int channel5Pin = 6; // Channel 5 (switch-based control)

// Variables to store the pulse width readings
int channel1Value = 0;
int channel2Value = 0;
int channel3Value = 0;
int channel4Value = 0;
int channel5Value = 0;  // Channel 5 for switch control

// Min and max PWM values from receiver (adjust based on your receiver)
const int minPulse = 1000;  // PWM pulse width for full reverse
const int maxPulse = 2000;  // PWM pulse width for full forward
const int stopPulse = 1500; // PWM pulse width for stop (neutral)

// Deadzone value (adjust as needed)
int deadzone = 50; // Change this value to adjust the deadzone sensitivity

// Servo debounce settings
int servoDebounce = 10;  // Debounce value (adjustable)
int previousServoValueChannel3 = stopPulse;  // Stores the last valid Channel 3 value
int previousServoValueChannel4 = stopPulse;  // Stores the last valid Channel 4 value

// Variables to store motor speed and direction
int leftMotorSpeed = 0;
int rightMotorSpeed = 0;
bool leftMotorDir = false;  // false for forward, true for reverse
bool rightMotorDir = false; // false for forward, true for reverse

// Servo objects
Servo MainBarServo; // New Servo for Channel 3 when Channel 5 < 150
Servo NeckBoxServo; // New Servo for Channel 4 when Channel 5 < 150
Servo HeadNodYes;  // New Servo for Channel 3 when Channel 5 > 1500
Servo HeadNodNo;   // New Servo for Channel 4 when Channel 5 > 1500

void setup() {
  // Motor control pin setup
  pinMode(pwmLeftMotor, OUTPUT);
  pinMode(dirLeftMotor, OUTPUT);
  pinMode(pwmRightMotor, OUTPUT);
  pinMode(dirRightMotor, OUTPUT);

  // Receiver channel input pin setup
  pinMode(channel1Pin, INPUT);
  pinMode(channel2Pin, INPUT);
  pinMode(channel3Pin, INPUT);
  pinMode(channel4Pin, INPUT);
  pinMode(channel5Pin, INPUT); // Channel 5 input

  // Attach the servos to pins
  MainBarServo.attach(47);     // MainBarServo attached to pin 47
  NeckBoxServo.attach(49);    // NeckBoxServo attached to pin 49
  HeadNodYes.attach(51);      // HeadNodYes attached to pin 51
  HeadNodNo.attach(53);       // HeadNodNo attached to pin 53

  // Serial monitor for debugging
  Serial.begin(9600);
}

void loop() {
  // Read PWM signals from the receiver
  channel1Value = pulseIn(channel1Pin, HIGH, 25000);  // Left-right control
  channel2Value = pulseIn(channel2Pin, HIGH, 25000);  // Forward-reverse control
  channel3Value = pulseIn(channel3Pin, HIGH, 25000);  // Servo control
  channel4Value = pulseIn(channel4Pin, HIGH, 25000);  // Servo control
  channel5Value = pulseIn(channel5Pin, HIGH, 25000);  // Switch control

  // Process Channel 2 for forward-reverse control (both motors move in the same direction)
  if (abs(channel2Value - stopPulse) > deadzone) {
    if (channel2Value > stopPulse) {
      // Forward motion for both motors
      leftMotorSpeed = map(channel2Value, stopPulse + deadzone, maxPulse, 0, 255);
      rightMotorSpeed = leftMotorSpeed;
      leftMotorDir = false;  // Forward
      rightMotorDir = false; // Forward
    } else if (channel2Value < stopPulse) {
      // Reverse motion for both motors
      leftMotorSpeed = map(channel2Value, stopPulse - deadzone, minPulse, 0, 255);
      rightMotorSpeed = leftMotorSpeed;
      leftMotorDir = true;   // Reverse
      rightMotorDir = true;  // Reverse
    }
  } else {
    // Stop motors if within deadzone
    leftMotorSpeed = 0;
    rightMotorSpeed = 0;
  }

  // Process Channel 1 for left-right steering (motors move in opposite directions)
  if (abs(channel1Value - stopPulse) > deadzone) {
    if (channel1Value > stopPulse) {
      // Turn right: Left motor forward, right motor reverse
      int steeringEffect = map(channel1Value, stopPulse + deadzone, maxPulse, 0, 255);
      leftMotorSpeed = steeringEffect;   // Increase left motor speed (forward)
      rightMotorSpeed = -steeringEffect; // Reverse right motor
      leftMotorDir = false;  // Forward
      rightMotorDir = true;  // Reverse
    } else if (channel1Value < stopPulse) {
      // Turn left: Right motor forward, left motor reverse
      int steeringEffect = map(channel1Value, stopPulse - deadzone, minPulse, 0, 255);
      leftMotorSpeed = -steeringEffect;  // Reverse left motor
      rightMotorSpeed = steeringEffect;  // Increase right motor speed (forward)
      leftMotorDir = true;   // Reverse
      rightMotorDir = false; // Forward
    }
  }

  // Control the left motor
  digitalWrite(dirLeftMotor, leftMotorDir); // Set direction
  analogWrite(pwmLeftMotor, constrain(abs(leftMotorSpeed), 0, 255)); // Set speed

  // Control the right motor
  digitalWrite(dirRightMotor, rightMotorDir); // Set direction
  analogWrite(pwmRightMotor, constrain(abs(rightMotorSpeed), 0, 255)); // Set speed

  // Process Channel 5 for switching between NeckBoxServo/MainBarServo and HeadNodYes/HeadNodNo
  if (channel5Value < 1500) {
    // Channel 5 below 1500: Control NeckBoxServo and MainBarServo
    if (abs(channel3Value - previousServoValueChannel3) > servoDebounce) {
      int servoPositionNeckBox = map(channel3Value, minPulse, maxPulse, 0, 180);
      NeckBoxServo.write(servoPositionNeckBox);  // Move NeckBoxServo
      previousServoValueChannel3 = channel3Value;
    }

    if (abs(channel4Value - previousServoValueChannel4) > servoDebounce) {
      int servoPositionMainBar = map(channel4Value, minPulse, maxPulse, 0, 180);
      MainBarServo.write(servoPositionMainBar);  // Move MainBarServo
      previousServoValueChannel4 = channel4Value;
    }
  } else {
    // Channel 5 above 1500: Control HeadNodYes and HeadNodNo
    if (abs(channel3Value - previousServoValueChannel3) > servoDebounce) {
      int servoPositionHeadNodYes = map(channel3Value, minPulse, maxPulse, 0, 180);
      HeadNodYes.write(servoPositionHeadNodYes);  // Move HeadNodYes
      previousServoValueChannel3 = channel3Value;
    }

    if (abs(channel4Value - previousServoValueChannel4) > servoDebounce) {
      int servoPositionHeadNodNo = map(channel4Value, minPulse, maxPulse, 0, 180);
      HeadNodNo.write(servoPositionHeadNodNo);  // Move HeadNodNo
      previousServoValueChannel4 = channel4Value;
    }
  }

 
  // For debugging other channels
  Serial.print(" Ch1: "); Serial.print(channel1Value);
  Serial.print(" Ch2: "); Serial.print(channel2Value);
  Serial.print(" Ch3: "); Serial.print(channel3Value);
  Serial.print(" Ch4: "); Serial.print(channel4Value);
  Serial.print(" Ch5 (Switch): "); Serial.print(channel5Value);
  Serial.print(" | Left Motor Speed: "); Serial.print(leftMotorSpeed);
  Serial.print(" Dir: "); Serial.print(leftMotorDir ? "Reverse" : "Forward");
  Serial.print(" | Right Motor Speed: "); Serial.print(rightMotorSpeed);
  Serial.print(" Dir: "); Serial.print(rightMotorDir ? "Reverse" : "Forward");
  Serial.print(" | NeckBox/MainBarServo or HeadNodYes/No Control: ");
  Serial.print((channel5Value < 1500) ? "NeckBox/MainBar" : "HeadNodYes/No");
  Serial.println();
  
  delay(50);  // Small delay to smooth out control
}
  
